Automation using cloud_formation stack


 AWSTemplateFormatVersion: 2010-09-09
  Description: AWS Step Functions sample project for running jobs on Amazon EKS.
  Resources:
    EKSClusterManagementStateMachine:
      Type: AWS::StepFunctions::StateMachine
      Properties:
        RoleArn: !GetAtt [ EKSClusterManagementStateMachineExecutionRole, Arn ]
        DefinitionString:
          !Sub
          - |-
            {
              "Comment": "An example of the Amazon States Language for running Amazon EKS Cluster",
              "StartAt": "Create an EKS cluster",
              "States": {
                "Create an EKS cluster": {
                  "Type": "Task",
                  "Resource": "arn:${AWS::Partition}:states:::eks:createCluster.sync",
                  "Parameters": {
                    "Name": "ExampleCluster",
                    "ResourcesVpcConfig": {
                      "SubnetIds": [
                        "${PubsubnetAz1}",
                        "${PubsubnetAz2}"
                      ]
                    },
                    "RoleArn": "${EKSServiceRole}"
                  },
                  "Retry": [{
                    "ErrorEquals": [ "States.ALL" ],
                    "IntervalSeconds": 30,
                    "MaxAttempts": 2,
                    "BackoffRate": 2
                  }],
                  "ResultPath": "$.eks",
                  "Next": "Create a node group"
                },
                "Create a node group": {
                  "Type": "Task",
                  "Resource": "arn:${AWS::Partition}:states:::eks:createNodegroup.sync",
                  "Parameters": {
                    "ClusterName": "ExampleCluster",
                    "NodegroupName": "ExampleNodegroup",
                    "NodeRole": "${NodeInstanceRole}",
                    "Subnets": [
                      "${PubsubnetAz1}",
                      "${PubsubnetAz2}"]
                  },
                  "Retry": [{
                    "ErrorEquals": [ "States.ALL" ],
                    "IntervalSeconds": 30,
                    "MaxAttempts": 2,
                    "BackoffRate": 2
                  }],
                  "ResultPath": "$.nodegroup",
                  "Next": "Run a job on EKS"
                },
                "Run a job on EKS": {
                  "Type": "Task",
                  "Resource": "arn:${AWS::Partition}:states:::eks:runJob.sync",
                  "Parameters": {
                    "ClusterName": "ExampleCluster",
                    "CertificateAuthority.$": "$.eks.Cluster.CertificateAuthority.Data",
                    "Endpoint.$": "$.eks.Cluster.Endpoint",
                    "LogOptions": {
                      "RetrieveLogs": true
                    },
                    "Job": {
                      "apiVersion": "batch/v1",
                      "kind": "Job",
                      "metadata": {
                        "name": "example-job"
                      },
                      "spec": {
                        "backoffLimit": 0,
                        "template": {
                          "metadata": {
                            "name": "example-job"
                          },
                          "spec": {
                            "containers": [
                              {
                                "name": "pi-20",
                                "image": "perl",
                                "command": [
                                  "perl"
                                ],
                                "args": [
                                  "-Mbignum=bpi",
                                  "-wle",
                                  "print '{ ' . '\"pi\": '. bpi(20) . ' }';"
                                ]
                              }
                            ],
                            "restartPolicy": "Never"
                          }
                        }
                      }
                    }
                  },
                  "ResultSelector": {
                    "status.$": "$.status",
                    "logs.$": "$.logs..pi"
                  },
                  "ResultPath": "$.RunJobResult",
                  "Next": "Examine output"
                },
                "Examine output": {
                  "Type": "Choice",
                  "Choices": [
                    {
                      "And": [
                        {
                          "Variable": "$.RunJobResult.logs[0]",
                          "NumericGreaterThan": 3.141
                        },
                        {
                          "Variable": "$.RunJobResult.logs[0]",
                          "NumericLessThan": 3.142
                        }
                      ],
                      "Next": "Send expected result"
                    }
                  ],
                  "Default": "Send unexpected result"
                },
                "Send expected result": {
                  "Type": "Task",
                  "Resource": "arn:${AWS::Partition}:states:::sns:publish",
                  "Parameters": {
                    "TopicArn": "${snsTopicArn}",
                    "Message": {
                      "Input.$": "States.Format('Saw expected value for pi: {}', $.RunJobResult.logs[0])"
                    }
                  },
                  "ResultPath": "$.SNSResult",
                  "Next": "Delete job"
                },
                "Send unexpected result": {
                  "Type": "Task",
                  "Resource": "arn:${AWS::Partition}:states:::sns:publish",
                  "Parameters": {
                    "TopicArn": "${snsTopicArn}",
                    "Message": {
                      "Input.$": "States.Format('Saw unexpected value for pi: {}', $.RunJobResult.logs[0])"
                    }
                  },
                  "ResultPath": "$.SNSResult",
                  "Next": "Delete job"
                },
                "Delete job": {
                  "Type": "Task",
                  "Resource": "arn:${AWS::Partition}:states:::eks:call",
                  "Parameters": {
                    "ClusterName": "ExampleCluster",
                    "CertificateAuthority.$": "$.eks.Cluster.CertificateAuthority.Data",
                    "Endpoint.$": "$.eks.Cluster.Endpoint",
                    "Method": "DELETE",
                    "Path": "/apis/batch/v1/namespaces/default/jobs/example-job"
                  },
                  "ResultSelector": {
                    "status.$": "$.ResponseBody.status"
                  },
                  "ResultPath": "$.DeleteJobResult",
                  "Next": "Delete node group"
                },
                "Delete node group": {
                  "Type": "Task",
                  "Resource": "arn:${AWS::Partition}:states:::eks:deleteNodegroup.sync",
                  "Parameters": {
                    "ClusterName": "ExampleCluster",
                    "NodegroupName": "ExampleNodegroup"
                  },
                  "Next": "Delete cluster"
                },
                "Delete cluster": {
                  "Type": "Task",
                  "Resource": "arn:${AWS::Partition}:states:::eks:deleteCluster.sync",
                  "Parameters": {
                    "Name": "ExampleCluster"
                  },
                  "End": true
                }
              }
            }
          - EKSServiceRole: !GetAtt EKSServiceRole.Arn
            NodeInstanceRole: !GetAtt NodeInstanceRole.Arn
            PubsubnetAz1: !Ref PublicSubnet1
            PubsubnetAz2: !Ref PublicSubnet2
            snsTopicArn: !Ref SNSTopic

    EKSClusterManagementStateMachineExecutionRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: 2012-10-17
          Statement:
            - Effect: Allow
              Principal:
                Service: states.amazonaws.com
              Action: sts:AssumeRole
        Path: /
        Policies:
          - PolicyName: StatesExecutionPolicy
            PolicyDocument:
              Version: 2012-10-17
              Statement:
                - Effect: Allow
                  Action:
                    - "eks:*"
                    - "ec2:DescribeSubnets"
                    - "iam:GetRole"
                    - "iam:ListAttachedRolePolicies"
                  Resource: "*"
                - Effect: Allow
                  Action:
                    - "iam:CreateServiceLinkedRole"
                  Resource: "*"
                  Condition:
                    StringLike:
                      iam:AWSServiceName:
                        - eks*.amazonaws.com
                - Effect: Allow
                  Action:
                    - sns:Publish
                  Resource:
                    - !Ref SNSTopic
                - Effect: Allow
                  Action:
                    - iam:PassRole
                  Resource:
                    - !GetAtt EKSServiceRole.Arn
                    - !GetAtt NodeInstanceRole.Arn

    NodeInstanceRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: 2012-10-17
          Statement:
            - Effect: Allow
              Principal:
                Service: !Sub ec2.${AWS::URLSuffix}
              Action: sts:AssumeRole
        ManagedPolicyArns:
          - "arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy"
          - "arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy"
          - "arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly"

    EKSServiceRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: 2012-10-17
          Statement:
            - Effect: Allow
              Principal:
                Service: eks.amazonaws.com
              Action: sts:AssumeRole
        ManagedPolicyArns:
          - "arn:aws:iam::aws:policy/AmazonEKSClusterPolicy"

    VPC:
      Type: AWS::EC2::VPC
      Properties:
        CidrBlock: !Ref VpcCIDR
        EnableDnsSupport: true
        EnableDnsHostnames: true
        Tags:
          - Key: Name
            Value: !Ref EnvironmentName

    InternetGateway:
      Type: AWS::EC2::InternetGateway
      Properties:
        Tags:
          - Key: Name
            Value: !Ref EnvironmentName

    InternetGatewayAttachment:
      Type: AWS::EC2::VPCGatewayAttachment
      Properties:
        InternetGatewayId: !Ref InternetGateway
        VpcId: !Ref VPC

    PublicSubnet1:
      Type: AWS::EC2::Subnet
      Properties:
        VpcId: !Ref VPC
        AvailabilityZone: !Select [ 0, !GetAZs '' ]
        CidrBlock: !Ref PublicSubnet1CIDR
        MapPublicIpOnLaunch: true
        Tags:
          - Key: Name
            Value: !Sub ${EnvironmentName} Public Subnet (AZ1)

    PublicSubnet2:
      Type: AWS::EC2::Subnet
      Properties:
        VpcId: !Ref VPC
        AvailabilityZone: !Select [ 1, !GetAZs  '' ]
        CidrBlock: !Ref PublicSubnet2CIDR
        MapPublicIpOnLaunch: true
        Tags:
          - Key: Name
            Value: !Sub ${EnvironmentName} Public Subnet (AZ2)

    PublicRouteTable:
      Type: AWS::EC2::RouteTable
      Properties:
        VpcId: !Ref VPC
        Tags:
          - Key: Name
            Value: !Sub ${EnvironmentName} Public Routes

    DefaultPublicRoute:
      Type: AWS::EC2::Route
      DependsOn: InternetGatewayAttachment
      Properties:
        RouteTableId: !Ref PublicRouteTable
        DestinationCidrBlock: 0.0.0.0/0
        GatewayId: !Ref InternetGateway

    PublicSubnet1RouteTableAssociation:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
        RouteTableId: !Ref PublicRouteTable
        SubnetId: !Ref PublicSubnet1

    PublicSubnet2RouteTableAssociation:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
        RouteTableId: !Ref PublicRouteTable
        SubnetId: !Ref PublicSubnet2

    NoIngressSecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupName: "no-ingress-sg"
        GroupDescription: "Security group with no ingress rule"
        VpcId: !Ref VPC

    SNSTopic:
      Type: AWS::SNS::Topic
      Properties:
        KmsMasterKeyId: !Ref SNSKeyAlias

    SNSKey:
      DeletionPolicy : Retain
      Type: AWS::KMS::Key
      Properties: 
        Enabled: true
        KeyPolicy: {
          "Version": "2012-10-17",
          "Statement": [
              {
                  "Sid": "Allow access through SNS for all principals in the account that are authorized to use SNS",
                  "Effect": "Allow",
                  "Principal": {
                      "AWS": "*"
                  },
                  "Action": [
                      "kms:Encrypt",
                      "kms:Decrypt",
                      "kms:ReEncrypt*",
                      "kms:GenerateDataKey*",
                      "kms:CreateGrant",
                      "kms:DescribeKey"
                  ],
                  "Resource": "*",
                  "Condition": {
                      "StringEquals": {
                          "kms:ViaService":  { "Fn::Join": [".",["sns","Ref" : "AWS::Region","amazonaws.com"]]},
                          "kms:CallerAccount": { "Ref" : "AWS::AccountId" }
                      }
                  }
              },
              {
                  "Sid": "Allow direct access to key metadata to the account",
                  "Effect": "Allow",
                  "Principal": {
                      "AWS": {"Fn::Join": [":",["arn:aws:iam:","Ref" : "AWS::AccountId","root"]]}
                  },
                  "Action": [
                      "kms:*"                  
                  ],
                  "Resource": "*"
              }
          ]
      }

    SNSKeyAlias:
      DependsOn: 
        - SNSKey
      Type: AWS::KMS::Alias
      Properties:
        AliasName: !Join ["", ['alias/Stack-',!Ref AWS::StackName,'/sns-key']]
        TargetKeyId: 
          Ref: SNSKey
  Parameters:
    EnvironmentName:
      Description: An environment name that is prefixed to resource names
      Type: String
      Default: SampleStepFunctionsEKSConnector

    VpcCIDR:
      Description: Please enter the IP range (CIDR notation) for this VPC
      Type: String
      Default: 10.192.0.0/16

    PublicSubnet1CIDR:
      Description: Please enter the IP range (CIDR notation) for the public subnet in the first Availability Zone
      Type: String
      Default: 10.192.10.0/24

    PublicSubnet2CIDR:
      Description: Please enter the IP range (CIDR notation) for the public subnet in the second Availability Zone
      Type: String
      Default: 10.192.11.0/24

  Outputs:
    StateMachineArn:
      Value: !Ref EKSClusterManagementStateMachine
    ExecutionInput:
      Description: Sample input to StartExecution.
      Value:
        >
        {}
